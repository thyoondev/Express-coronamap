<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no" />
    <title>실시간 코로나 발생 현황</title>
    <link rel="stylesheet" href="/stylesheets/style.css" />
    <script type="text/javascript" src="https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=87p51rsq4y"></script>
  </head>

  <body>
    <div id="navbar" onclick="infoEvent()">CoronaInfo
    </div>
    <!-- 현재 날짜 박스-->

    <div id="infoBox">
      <div id="infoTitle">국내 현황</div>
      <!--<div id="infoToday"></div>-->
      <div id="infoContent">
        <br />
        <div id="infoList1">
          <div class="infoName">확진환자</div>
          <div id="infoAll"></div>
        </div>
        <br />
        <div id="infoList2">
          <div class="infoName">검사중</div>
          <div id="infoChecking"></div>
        </div>
        <br />
        <div id="infoList3">
          <div class="infoName">격리해제</div>
          <div id="infoFine"></div>
        </div>
        <br />
        <div id="infoList4">
          <div class="infoName">사망자</div>
          <div id="infoDied"></div>
        </div>
        <br />
        <div id="infoList5">
          <div class="infoName">업데이트</div>
          <div id="infoStateDt"></div>
        </div>
      </div>
    </div>

    <div id="infoBoxLocation">
      <div id="infoTitleLocation"></div>
      <!--<div id="infoToday"></div>-->
      <div id="infoContent">
        <br />
        <div id="infoList1">
          <div class="infoName">확진환자</div>
          <div id="infoAllLocation"></div>
        </div>
        <br />
        <div id="infoList2">
          <div class="infoName">검사중</div>
          <div id="infoCheckingLocation"></div>
        </div>
        <br />
        <div id="infoList3">
          <div class="infoName">격리해제</div>
          <div id="infoFineLocation"></div>
        </div>
        <br />
        <div id="infoList4">
          <div class="infoName">사망자</div>
          <div id="infoDiedLocation"></div>
        </div>
        <br />
        <div id="infoList5">
          <div class="infoName">업데이트</div>
          <div id="infoStateDtLocation"></div>
        </div>
      </div>
    </div>

    <!-- 날짜 구분 박스-->
    <div id="dateInfoBox">
      <div id="dateInfoTitle">방문날짜에 따른 색상구분</div>
      <div id="dateInfo1">
        <div id="circle1"></div>
        24시간 미만
      </div>
      <div id="dateInfo2">
        <div id="circle2"></div>
        24시간 이상 4일 미만
      </div>
      <div id="dateInfo3">
        <div id="circle3"></div>
        4일 이상 14일 이하
      </div>
      <div id="dateInfo3">
        th.yoon.dev@gmail.com
      </div>
      
    </div>

    <div id="map" style="width: 100%; height: 100vh"></div>

    <script type="text/javascript" src="/data/data.js">
      //data.js
    </script>

    <!--현재 날짜 출력-->
    <script>
      let today = new Date();

      let year = today.getFullYear(); // 년도
      let month = today.getMonth() + 1; // 월
      let date = today.getDate(); // 날짜
      let day = today.getDay(); // 요일

      today = year + "/" + month + "/" + date; //날짜 형식

      //document.getElementById("infoToday").innerHTML = today; //showToday 안에 현재 날짜 보여줌
    </script>

    <script>
      //공공 api ajax rest 통신 xml 데이터 파싱하기/보건복지부_코로나19 감염_현황
      var xhr = new XMLHttpRequest();
      var url = "http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19InfStateJson"; /*URL*/
      var queryParams = "?" + encodeURIComponent("ServiceKey") + "=" + "ed9v9eIRGelE0CM5aVlO9igCLIt19%2F9LwOeXm4ReIf5St9Swn9jyZa%2FRMtNiac9ELFwvvoD8d9q3%2FYKpzHlWsA%3D%3D"; /*Service Key*/
      queryParams += "&" + encodeURIComponent("ServiceKey") + "=" + encodeURIComponent("-"); /**/
      queryParams += "&" + encodeURIComponent("pageNo") + "=" + encodeURIComponent("1"); /**/
      queryParams += "&" + encodeURIComponent("numOfRows") + "=" + encodeURIComponent("1"); /**/
      queryParams += "&" + encodeURIComponent("startCreateDt") + "=" + encodeURIComponent(String(year) + String(month) + String(date)); /**/
      queryParams += "&" + encodeURIComponent("endCreateDt") + "=" + encodeURIComponent(String(year) + String(month) + String(date)); /**/
      xhr.open("GET", url + queryParams);
      xhr.onreadystatechange = function () {
        if (this.readyState == 4) {
          //xml파일에서 태그값으로 데이터 가져오기
          var xmlDoc = this.responseXML;
          var infoDecideCnt = xmlDoc.getElementsByTagName("decideCnt")[0].childNodes[0].nodeValue;
          var infoExamCnt = xmlDoc.getElementsByTagName("examCnt")[0].childNodes[0].nodeValue;
          var infoClearCnt = xmlDoc.getElementsByTagName("clearCnt")[0].childNodes[0].nodeValue;
          var infoDeathCnt = xmlDoc.getElementsByTagName("deathCnt")[0].childNodes[0].nodeValue;
          var infoStateDt = xmlDoc.getElementsByTagName("stateDt")[0].childNodes[0].nodeValue;

          //html태그안에 데이터 값 넣어주기
          document.getElementById("infoAll").innerHTML = infoDecideCnt + "명";
          document.getElementById("infoChecking").innerHTML = infoExamCnt + "명";
          document.getElementById("infoFine").innerHTML = infoClearCnt + "명";
          document.getElementById("infoDied").innerHTML = infoDeathCnt + "명";
          document.getElementById("infoStateDt").innerHTML = infoStateDt;
        }
      };

      xhr.send("");
    </script>
    <script>
      //보건복지부_코로나19 시·도발생_현황
      var xhr = new XMLHttpRequest();
      var url = "http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19SidoInfStateJson"; /*URL*/
      var queryParams = "?" + encodeURIComponent("ServiceKey") + "=" + "ed9v9eIRGelE0CM5aVlO9igCLIt19%2F9LwOeXm4ReIf5St9Swn9jyZa%2FRMtNiac9ELFwvvoD8d9q3%2FYKpzHlWsA%3D%3D"; /*Service Key*/
      queryParams += "&" + encodeURIComponent("ServiceKey") + "=" + encodeURIComponent("-"); /**/
      queryParams += "&" + encodeURIComponent("pageNo") + "=" + encodeURIComponent("1"); /**/
      queryParams += "&" + encodeURIComponent("numOfRows") + "=" + encodeURIComponent("1"); /**/
      queryParams += "&" + encodeURIComponent("startCreateDt") + "=" + encodeURIComponent(String(year) + String(month) + String(date)); /**/
      queryParams += "&" + encodeURIComponent("endCreateDt") + "=" + encodeURIComponent(String(year) + String(month) + String(date)); /**/
      xhr.open("GET", url + queryParams);
      console.log(url + queryParams);
      xhr.onreadystatechange = function () {
        if (this.readyState == 4) {
          var xmlDoc = this.responseXML;

          var infoLocation = xmlDoc.getElementsByTagName("gubun")[12].childNodes[0].nodeValue;
          var infoDefCnt = xmlDoc.getElementsByTagName("defCnt")[12].childNodes[0].nodeValue;
          var infoIsolClearCnt = xmlDoc.getElementsByTagName("isolClearCnt")[12].childNodes[0].nodeValue;
          var infoDeathCnt = xmlDoc.getElementsByTagName("deathCnt")[12].childNodes[0].nodeValue;
          var infoStdDay = xmlDoc.getElementsByTagName("stdDay")[12].childNodes[0].nodeValue;


          //html태그안에 데이터 값 넣어주기
          document.getElementById("infoTitleLocation").innerHTML = infoLocation;
          document.getElementById("infoAllLocation").innerHTML = infoDefCnt + "명";
          document.getElementById("infoFineLocation").innerHTML = infoIsolClearCnt + "명";
          document.getElementById("infoDiedLocation").innerHTML = infoDeathCnt + "명";
          document.getElementById("infoStateDtLocation").innerHTML = infoStdDay;
        }
      };

      xhr.send("");
    </script>
    <script>
      //지도 초기화면 값
      var mapOptions = {
        center: new naver.maps.LatLng(36.35045075252815, 127.38481468495347), //지도의 초기 중심 좌표
        zoom: 12, //지도 초기 줌 레벨
        mapTypeId: "normal", //지도 종류
        minZoom: 7, //지도의 최소 줌 레벨
        zoomControl: false, //줌 컨트롤의 표시 여부
        //줌 컨트롤의 옵션
        zoomControlOptions: {
          position: naver.maps.Position.TOP_RIGHT,
          style: naver.maps.ZoomControlStyle.LARGE,
        },
        logoControl: false, //로고 컨트롤
        mapDataControl: true, //일반 위성 컨트롤
        mapTypeControl: false, //
      };

      var map = new naver.maps.Map("map", mapOptions);
      var markerList = [];
      var infowindowList = [];

      //마커생성
      for (var i in data) {
        var target = data[i];
        var latlng = new naver.maps.LatLng(target.lat, target.lng);

        //두 날짜 계산
        // data.js에서 날짜 받아오기
        const date1 = new Date(target.year, target.month, target.date);
        // 오늘 날짜
        const date2 = new Date(year, month, date);

        const elapsedMSec = date2.getTime() - date1.getTime(); // 경과 초 구하기
        const elapsedDay = elapsedMSec / 1000 / 60 / 60 / 24; // 경과 일 구하기

        //방문 24시간 미만일경우
        if (elapsedDay <= 1) {
          marker = new naver.maps.Marker({
            map: map,
            position: latlng,
            icon: {
              content: "<div class='marker1'></div>",
              anchor: new naver.maps.Point(12, 12),
            },
          });
        }
        //방문  24시간이상 4일 미만일경우
        if (elapsedDay > 1 && elapsedDay < 4) {
          marker = new naver.maps.Marker({
            map: map,
            position: latlng,
            icon: {
              content: "<div class='marker2'></div>",
              anchor: new naver.maps.Point(12, 12),
            },
          });
        }
        //방문  4일이상 14일 이하일경우
        if (elapsedDay >= 4 && elapsedDay <= 14) {
          marker = new naver.maps.Marker({
            map: map,
            position: latlng,
            icon: {
              content: "<div class='marker3'></div>",
              anchor: new naver.maps.Point(12, 12),
            },
          });
        }

        var content = `<div class='infowindow_wrap'>
       <div class='infowindow_title'>${target.title}</div>
       <div class='infowindow_content'>${target.content}</div>
       <div class='infowindow_date'>${target.year}/${target.month}/${target.date}</div>
       </div>`;

        //마커정보박스
        var infowindow = new naver.maps.InfoWindow({
          content: content,
          backgroundColor: "#00ff0000",
          borderColor: "#00ff0000",
          anchorSize: new naver.maps.Size(0, 0),
        });

        markerList.push(marker);
        infowindowList.push(infowindow);
      }

      //마커 정보 박스 클릭 이벤트
      for (var i = 0, ii = markerList.length; i < ii; i++) {
        naver.maps.Event.addListener(map, "click", ClickMap(i));
        naver.maps.Event.addListener(markerList[i], "click", getClickHandler(i));
      }

      //지도 클릭할 때
      function ClickMap(i) {
        return function () {
          var infowindow = infowindowList[i];
          infowindow.close();
        };
      }

      //마커 클릭할때
      function getClickHandler(i) {
        return function () {
          var marker = markerList[i];
          var infowindow = infowindowList[i];
          if (infowindow.getMap()) {
            infowindow.close();
          } else {
            infowindow.open(map, marker);
          }
        };
      }
    </script>

    <script>
      function infoEvent(){
        var infoBox = document.getElementById("infoBox");
        var infoBoxLocation = document.getElementById("infoBoxLocation");
        var dateInfoBox = document.getElementById("dateInfoBox");
        
        if(infoBox.style.display == "none"){
              //메뉴 보이기
              infoBox.style.display = "block";
              dateInfoBox.style.display = "block";
              infoBoxLocation.style.display = "block";
            }
            else
            {
              
              //메뉴 감추기
              infoBox.style.display ="none";
              infoBoxLocation.style.display ="none";
              dateInfoBox.style.display = "none";
            }
                }
    </script>
  </body>
</html>
